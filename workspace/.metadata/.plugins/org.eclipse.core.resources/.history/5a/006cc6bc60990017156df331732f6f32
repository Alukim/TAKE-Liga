package models;

import java.time.LocalTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import Exceptions.NotEnoughFuel;
import Exceptions.TooMuchPetrol;
import Logs.LogsProvider;
import Logs.RefuelLog;
import Providers.DateProvider;

public class PetrolStation {

	public float minTankVolumeToReturnOrder = 1000f;
	public ArrayList<Tank> tanks = new ArrayList<>();
	ArrayList<Nozzle> nozzles = new ArrayList<>();
	ArrayList<Customer> customers = new ArrayList<>();
	Random random;
	
	public PetrolStation(int tanksCount, float maxTankVolume, int tankHigh, int nozzlesCountPerTank){	
		random = new Random();
		int nozzleId = 1;
		for(int i = 1; i < tanksCount+1; i++){
			Tank tank = new Tank(i, maxTankVolume, tankHigh);
			tanks.add(tank);
			for(int j = 1; j < nozzlesCountPerTank; j++){
				nozzles.add(new Nozzle(nozzleId, tank));
				nozzleId += 1;
			}
		}		
	}	
	
	public Map<Integer, Float> getOrders() {
		Map<Integer, Float> orders = new HashMap<Integer, Float>();
		for (Tank tank : tanks) {
			if(tank.currentVolume < minTankVolumeToReturnOrder)
				orders.put(tank.id, tank.maxVolume - tank.currentVolume);
		}
		return orders;
	}

	public void refuelTanks(ArrayList<Supply> supplies) {
		for (Tank tank : tanks) {
			for(Supply supply : supplies){
				if(tank.id == supply.tankId){
					try {
						System.out.println("Delivering petrol");
						tank.Refuel(supply.getSupplyPetrolAmount());
						supply.completeDataAboutSupply();
						generateRefuelLog(tank, supply);
					} catch (TooMuchPetrol e) {
						e.printStackTrace();
					}
				}					
			}
		}		
	}

	private void generateRefuelLog(Tank tank, Supply supply) {
		RefuelLog log = new RefuelLog(DateProvider.getCurrentDateTime(), tank.id, supply.petrolAmount, supply.petrolLoss);
		LogsProvider.refuelLogs.add(log);
	}

	public void simulateActivity() {	
		SimulateArrivingCustomers();
		HandleQueuesAtNozzles();
		
	}

	private void SimulateArrivingCustomers() {
		System.out.println("Generating customers");
		ArrayList<Customer> customers = generateCustomers();
		for (Customer customer : customers) {
			System.out.println("Looking for a nozzle for the customer");
			Nozzle nozzle = findNozzleForCustomer(null);
			nozzle.addCustomerToQueue(customer);
			this.customers.add(customer);
		}
	}
	
	private void HandleQueuesAtNozzles() {
		System.out.println("Handling the queues at nozzles");
		for (Nozzle nozzle : nozzles) {
			try {
				nozzle.handleQueue();
			} catch (NotEnoughFuel e) {
				System.out.println("Not enough fuel for customer.");
				Customer customer = e.getUnhandledCustomer();
				Nozzle newNozzle = findNozzleForCustomer(nozzle);
				newNozzle.addCustomerToQueue(customer);
			}
			
		}		
	}

	private Nozzle findNozzleForCustomer(Nozzle lastNozzle) {
		Nozzle bestNozzle = null;
		for (Nozzle nozzle : nozzles) {
			if(lastNozzle == null || nozzle.id != lastNozzle.id){
				
				if(nozzle.getQueueLength() == 0)
					return nozzle;
				
				if(bestNozzle == null || nozzle.getQueueLength() < bestNozzle.getQueueLength())
					bestNozzle = nozzle;
			}			
		}
		
		return bestNozzle;
	}

	private ArrayList<Customer> generateCustomers() {
		ArrayList<Customer> customers = new ArrayList<>();
		int customersCount = generateCustomersCount();
		
		for(int i = 0; i < customersCount; i++){
			customers.add(new Customer(generateCustomersOrder()));
		}		
		return customers;
	}
	
	private int generateCustomersCount(){
		LocalTime currentTime = DateProvider.getCurrentDateTime().toLocalTime();
		
		if(currentTime.isBefore(LocalTime.MIDNIGHT.plusHours(6)))
			return random.nextInt(2);
		else if(currentTime.isBefore(LocalTime.MIDNIGHT.plusHours(9)))
			return random.nextInt(5);
		else if(currentTime.isBefore(LocalTime.NOON))
			return random.nextInt(3);
		else if(currentTime.isBefore(LocalTime.NOON.plusHours(4)))
			return random.nextInt(7);
		else if(currentTime.isBefore(LocalTime.NOON.plusHours(8)))
			return random.nextInt(4);
		else 
			return random.nextInt(3);
	}
	
	private float generateCustomersOrder(){
		int order;
		do {
			order = random.nextInt(100);
		} while (order < 1);
		return (float)order;
	}

}
